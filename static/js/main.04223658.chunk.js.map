{"version":3,"sources":["helpers/urls.js","components/Weather.js","components/App.js","reportWebVitals.js","index.js"],"names":["API_URL","API_KEY","APIUrls","lat","lon","city","Weather","weather","console","log","current","hourly","daily","days","displayTime","d","date","Date","getHours","getMinutes","toFixed","displayDay","getDay","className","temp","description","src","icon","alt","map","data","dt","getTime","parseInt","_daily","max","min","App","useState","setLat","long","setLong","setData","search","setSearch","useEffect","a","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetchWeather","fetchData","url","fetch","then","res","json","result","handleSubmit","e","preventDefault","cod","coord","alert","onSubmit","type","value","onChange","target","placeholder","style","width","borderRadius","cursor","onClick","document","body","classList","toggle","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.04223658.chunk.js","sourcesContent":["const API_URL = \"https://api.openweathermap.org/data/2.5\";\nconst API_KEY = \"a2b1c2b60207d295e1ffb2f839310926\";\nexport const APIUrls = {\n  fetchWeatherUsingCords: (lat, lon) =>\n    `${API_URL}/onecall?lat=${lat}&lon=${lon}&appid=${API_KEY}`,\n  fetchWeatherUsingCity: (city) =>\n    `${API_URL}/weather?q=${city}&appid=${API_KEY}`,\n};\n// ICON_URL = \"https://openweathermap.org/img/w\";\n","import React from \"react\";\n\nconst Weather = ({ weather }) => {\n  console.log(weather);\n  const { current, hourly, daily } = weather;\n  const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\n  function displayTime(d) {\n    var date = new Date(d * 1000);\n    var hrs = date.getHours();\n    var minutes = date.getMinutes();\n\n    var formattedTime = hrs + \":\" + minutes.toFixed();\n\n    return formattedTime;\n  }\n\n  function displayDay(d) {\n    var date = new Date(d * 1000);\n    return days[date.getDay()];\n  }\n\n  return (\n    <div>\n      <div className=\"location-container\">\n        {/* <div className=\"location\">\n          {weather.name}, {weather.sys.country}\n        </div> */}\n        {/* <div className=\"date\"> {dateBuild(new Date())}</div> */}\n      </div>\n      <div className=\"weather-container\">\n        <div className=\"temperature\">{(current.temp - 273).toFixed(2)}째C</div>\n        <div className=\"weather\">\n          {current.weather[0].description}\n          <img\n            src={`http://openweathermap.org/img/wn/${current.weather[0]?.icon}@2x.png`}\n            alt=\"\"\n          />\n        </div>\n      </div>\n      <hr />\n\n      <div className=\"weather-hourly-container\">\n        <p>Hourly Weather Report</p>\n        {hourly.map((data) => {\n          return (\n            <div className=\"weather-hourly-info\">\n              <p>{displayTime(new Date(data.dt).getTime())}</p>\n              <img\n                src={`http://openweathermap.org/img/wn/${data.weather[0]?.icon}@2x.png`}\n                alt=\"\"\n              />\n              <p>\n                {parseInt((data.temp - 273).toFixed(2))}\n                <sup>째c</sup>\n              </p>\n            </div>\n          );\n        })}\n      </div>\n      <hr />\n      <div className=\"weather-daily-container\">\n        <p>Daily Weather Report</p>\n        {daily.map((_daily) => {\n          return (\n            <div className=\"weather-daily-info\">\n              <img\n                src={`http://openweathermap.org/img/wn/${_daily.weather[0].icon}@2x.png\n                      `}\n                alt=\"\"\n              />\n              <div className=\"weather-min-max\">\n                <div className=\"weather-max\">\n                  <p>\n                    {parseInt(_daily.temp?.max - 273).toFixed(2)}\n                    <sup>째c</sup>\n                  </p>\n                </div>\n                <div className=\"weather-min\">\n                  <p>\n                    {parseInt(_daily.temp?.min - 273).toFixed(2)}\n                    <sup>째c</sup>\n                  </p>\n                </div>\n              </div>\n              <p className=\"day\">{displayDay(_daily.dt)}</p>\n              <p>{_daily.weather && _daily.weather[0].description}</p>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;\n","import React, { useEffect, useState } from \"react\";\nimport { APIUrls } from \"../helpers/urls\";\nimport Weather from \"./Weather\";\n\nfunction App() {\n  const [lat, setLat] = useState([]);\n  const [long, setLong] = useState([]);\n  const [data, setData] = useState([]);\n  const [search, setSearch] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      console.log(\"I am hete\");\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setLat(position.coords.latitude);\n        setLong(position.coords.longitude);\n        fetchWeather(lat, long);\n      });\n    };\n    fetchData();\n  }, [lat, long]);\n\n  const fetchWeather = async (lat, long) => {\n    const url = APIUrls.fetchWeatherUsingCords(lat, long);\n    console.log(lat + \"   \" + long, url);\n    await fetch(url)\n      .then((res) => res.json())\n      .then((result) => {\n        console.log(data);\n        setData(result);\n        console.log(result);\n        console.log(data);\n      });\n  };\n  const myFunction = () => {\n    var element = document.body;\n    element.classList.toggle(\"dark-mode\");\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (search !== \"\") {\n      console.log(search);\n      const url = APIUrls.fetchWeatherUsingCity(search);\n\n      await fetch(url)\n        .then((res) => res.json())\n        .then((result) => {\n          console.log(result);\n          if (result.cod !== 404) {\n            // setLat(result.coord.lat);\n            // setLong(result.coord.lon);\n            fetchWeather(result.coord.lat, result.coord.lon);\n            // setData(result);\n            console.log(data);\n          } else {\n            alert(\"Enter Valid Location\");\n          }\n        });\n    } else {\n      alert(\"Enter a valid location\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"search-container\">\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            value={search}\n            className=\"search-bar\"\n            onChange={(e) => setSearch(e.target.value)}\n            placeholder=\"Enter a location\"\n          />\n        </form>\n\n        <img\n          style={{\n            width: 50,\n            borderRadius: \"50%\",\n            cursor: \"pointer\",\n          }}\n          src=\"https://as1.ftcdn.net/v2/jpg/03/87/72/58/500_F_387725818_unRqx7OcCU647jXSbOGWM02BWTJSux3f.jpg\"\n          alt=\"toggle-button\"\n          onClick={myFunction}\n        />\n      </div>\n      {typeof data.current != \"undefined\" ? (\n        <Weather weather={data} />\n      ) : (\n        <div></div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}